#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <stack>
#include <bitset>
#define INF 0x3f3f3f3f
#define eps 1e-8
#define FI first
#define SE second
using namespace std;
typedef long long LL;
const int Mod = 1000000007;
const int N = 1005;

inline void add(int &x, int v) {
    x += v;
    if(x >= Mod) x -= Mod;
}

int pw[N];
struct Vector {
    LL x, y;
    double ang;
    inline void read() { scanf("%lld%lld", &x, &y); }
    Vector(LL _x = 0, LL _y = 0) { x = _x; y = _y; }
    Vector operator +(Vector a) const { return Vector(x + a.x, y + a.y); }
    Vector operator +=(Vector a) { return *this = *this + a; }
    Vector operator -(Vector a) const { return Vector(x - a.x, y - a.y); }
    Vector operator -=(Vector a) { return *this = *this - a; }
    bool operator < (Vector a) const { return ang < a.ang; }
    double len() const{ return sqrt(x * x + y * y); }
    double angle() const { return atan2(y, x); }
} p[N], t[N * 2];
inline LL cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }

int n;
int solve(int x) {
    int cc = 0;
    for(int i = 0; i < n; ++i) {
        if(i == x) continue;
        t[cc] = p[i];
        t[cc++].ang = atan2(p[i].y - p[x].y, p[i].x - p[x].x);
    }
    sort(t, t + cc);
    for(int i = 0; i < cc; ++i) t[i + cc] = t[i];
    int res = 0, cnt = 0;
    for(int i = 0, j = 0; i < cc; ++i) {
        for(; j < i + cc; ++j) {
            if(cross(t[i] - p[x], t[j] - p[x]) < 0) break;
            ++cnt;
        }
        int v = cross(p[x], t[i]) % Mod;
        add(v, Mod);
        add(res, 1LL * v * (pw[cnt - 1] - 1) % Mod);
        --cnt;
    }
    return res;
}

int main() {
    pw[0] = 1;
    for(int i = 1; i < N; ++i) pw[i] = pw[i - 1] * 2 % Mod;
    int T;
    scanf("%d", &T);
    while(T--) {
        scanf("%d", &n);
        for(int i = 0; i < n; ++i) p[i].read();
        int ans = 0;
        for(int i = 0; i < n; ++i) add(ans, solve(i));
        printf("%d\n", ans);
    }
    return 0;
}
